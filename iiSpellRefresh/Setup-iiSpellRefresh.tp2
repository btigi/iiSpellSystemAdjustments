// ----------------------------------------------------------------------------
// Name:   Spell Refresh Mod
// Author: igi
// Date:   21/09/2006
// ----------------------------------------------------------------------------
BACKUP ~iiSpellRefresh/backup~
AUTHOR ~igi~

LANGUAGE ~English~ ~English~ ~iiSpellRefresh/Languages/English/setup.tra~
LANGUAGE ~Spanish (Translation by Immortality)~  ~Spanish~ ~iiSpellRefresh/Languages/Spanish/setup.tra~


// ------------------------------------------------------------------------------------------------------------------------
// Readme stuff
// Some people like to view the readme
BEGIN @1010
NO_LOG_RECORD
DESIGNATED 1000
SUBCOMPONENT @1000
  AT_INTERACTIVE_EXIT ~VIEW iiSpellRefresh/Readme-iiSpellRefresh.txt~


// And some people don't like to view the readme
BEGIN @1020
DESIGNATED 2000
NO_LOG_RECORD
SUBCOMPONENT @1000
// Do nothing


//!----------------------------------------------------------------------------
// Mage Spells
//!----------------------------------------------------------------------------
BEGIN @51
GROUP @100
SUBCOMPONENT @10
  PRINT @50

  ACTION_READLN SpellRefreshTime

  OUTER_WHILE !(IS_AN_INT %SpellRefreshTime%) BEGIN
    PRINT @50
    ACTION_READLN SpellRefreshTime
  END


  ACTION_IF (IS_AN_INT ~%SpellRefreshTime%~) THEN BEGIN
    COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
      PATCH_IF (SOURCE_SIZE > 0x71) THEN BEGIN // protects against invalid files
        SPRINT SpellRefreshTime ~%SpellRefreshTime%~
    
        READ_SHORT 0x1c "spl_type"
        READ_LONG  0x64 "abil_off"
        READ_SHORT 0x68 "abil_num"
        READ_LONG  0x6a "fx_off"
        READ_SHORT 0x70 "fx_num"
      
        PATCH_IF ("%spl_type%" = "1") BEGIN
          WHILE ("%abil_num%" > 0) BEGIN // adjusts indices for abilities
            SET "abil_num" = ("%abil_num%" - 1)
            READ_SHORT  ("%abil_off%" + 0x20 + ("%abil_num%" * 0x38)) "fx_idx"
            WRITE_SHORT ("%abil_off%" + 0x20 + ("%abil_num%" * 0x38)) ("%fx_idx%" + 1)
          END
          WRITE_SHORT 0x70 ("%fx_num%" + 1)
        
          INSERT_BYTES  ("%fx_off%"       ) 0x30       // New effect
            WRITE_SHORT ("%fx_off%"       ) 261        // Restore Lost Spell
            WRITE_BYTE  ("%fx_off%" + 0x02) 1          // Target Self
            WRITE_BYTE  ("%fx_off%" + 0x04) 9          // P1
            WRITE_BYTE  ("%fx_off%" + 0x08) 0          // P2 (Wizard / Bard)
            PATCH_IF (%SpellRefreshTime% = 0) BEGIN
              WRITE_BYTE  ("%fx_off%" + 0x0c) 1        // Permanent/Instant
            END
            ELSE BEGIN
              WRITE_BYTE  ("%fx_off%" + 0x0c) 4        // Delayed
              WRITE_BYTE  ("%fx_off%" + 0x0e) %SpellRefreshTime% // User-defined value
            END
            WRITE_BYTE  ("%fx_off%" + 0x12) 100        // Probability
            WRITE_BYTE  ("%fx_off%" + 0x0d) 3          // Dispel/Bypass
          WHILE ("%fx_num%" > 0) BEGIN
            SET "fx_num" = ("%fx_num%" - 1)
            WRITE_BYTE ("%fx_off%" + 0x0d) 2 // no dispel/not bypass
            WRITE_LONG ("%fx_off%" + 0x0e) 0 // duration
          END
        END
      END
      BUT_ONLY_IF_IT_CHANGES
  END




BEGIN @52
GROUP @100
SUBCOMPONENT @10
  PRINT @50
  ACTION_READLN SpellRefreshTime

  OUTER_WHILE !(IS_AN_INT %SpellRefreshTime%) BEGIN
    PRINT @50
    ACTION_READLN SpellRefreshTime
  END

  ACTION_IF (IS_AN_INT ~%SpellRefreshTime%~) THEN BEGIN
    COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
    READ_SHORT 0x1c "spl_type"
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"
    PATCH_IF ("%spl_type%" = "1") BEGIN
      SET "loops" = 0
      SET "delta" = 0
      WHILE ("%loops%" < "%abil_num%") BEGIN
        READ_SHORT ("%abil_off%" + 0x1e + (0x28 * "%loops%")) "abil_fx_num"
        READ_SHORT ("%abil_off%" + 0x20 + (0x28 * "%loops%")) "abil_fx_idx"
        SET "abil_fx_idx" = ("%abil_fx_idx%" + "%delta%")
        WRITE_SHORT ("%abil_off%" + 0x20 + (0x28 * "%loops%")) "%abil_fx_idx%"
        INSERT_BYTES  ("%fx_off%" +        ("%abil_fx_idx%" * 0x30)) 0x30   // New effect
          WRITE_SHORT ("%fx_off%" +        ("%abil_fx_idx%" * 0x30)) 261    // Restore Lost Spell
          WRITE_BYTE ("%fx_off%" + 0x02 + (("%abil_fx_idx%") * 0x30)) 1     // Target Self
          WRITE_BYTE ("%fx_off%" + 0x04 + (("%abil_fx_idx%") * 0x30)) 9     // P1
          WRITE_BYTE ("%fx_off%" + 0x08 + (("%abil_fx_idx%") * 0x30)) 0     // P2 (Wizard / Bard)
          PATCH_IF (%SpellRefreshTime% = 0) BEGIN
            WRITE_BYTE ("%fx_off%" + 0x0c + (("%abil_fx_idx%") * 0x30)) 1   // Permanent/Instant
          END
          ELSE BEGIN
            WRITE_BYTE ("%fx_off%" + 0x0c + (("%abil_fx_idx%") * 0x30)) 4   // Delayed
            WRITE_BYTE ("%fx_off%" + 0x0e + (("%abil_fx_idx%") * 0x30)) %SpellRefreshTime% // User-defined value
          END
          WRITE_BYTE ("%fx_off%" + 0x12 + (("%abil_fx_idx%") * 0x30)) 100   // Probability
          WRITE_BYTE ("%fx_off%" + 0x0d + (("%abil_fx_idx%") * 0x30)) 3     // Dispel/Bypass
        SET "delta1" = 1
        SET "delta" = ("%delta%" + "%delta1%")
        WRITE_SHORT ("%abil_off%" + 0x1e + (0x28 * "%loops%")) ("%abil_fx_num%" + "%delta1%")
        SET "loops" = ("%loops%" + 1)
      END
    END
    BUT_ONLY_IF_IT_CHANGES
  END





//!----------------------------------------------------------------------------
// Priest Spells
//!----------------------------------------------------------------------------
BEGIN @51
GROUP @110
SUBCOMPONENT @20
  PRINT @50

  ACTION_READLN SpellRefreshTime

  OUTER_WHILE !(IS_AN_INT %SpellRefreshTime%) BEGIN
    PRINT @50
    ACTION_READLN SpellRefreshTime
  END


  ACTION_IF (IS_AN_INT ~%SpellRefreshTime%~) THEN BEGIN
    COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
      PATCH_IF (SOURCE_SIZE > 0x71) THEN BEGIN // protects against invalid files
        SPRINT SpellRefreshTime ~%SpellRefreshTime%~
    
        READ_SHORT 0x1c "spl_type"
        READ_LONG  0x64 "abil_off"
        READ_SHORT 0x68 "abil_num"
        READ_LONG  0x6a "fx_off"
        READ_SHORT 0x70 "fx_num"
      
        PATCH_IF ("%spl_type%" = "2") BEGIN
          WHILE ("%abil_num%" > 0) BEGIN // adjusts indices for abilities
            SET "abil_num" = ("%abil_num%" - 1)
            READ_SHORT  ("%abil_off%" + 0x20 + ("%abil_num%" * 0x38)) "fx_idx"
            WRITE_SHORT ("%abil_off%" + 0x20 + ("%abil_num%" * 0x38)) ("%fx_idx%" + 1)
          END
          WRITE_SHORT 0x70 ("%fx_num%" + 1)
        
          INSERT_BYTES  ("%fx_off%"       ) 0x30       // New effect
            WRITE_SHORT ("%fx_off%"       ) 261        // Restore Lost Spell
            WRITE_BYTE  ("%fx_off%" + 0x02) 1          // Target Self
            WRITE_BYTE  ("%fx_off%" + 0x04) 9          // P1
            WRITE_BYTE  ("%fx_off%" + 0x08) 1          // P2 (Priest / Druid)
            PATCH_IF (%SpellRefreshTime% = 0) BEGIN
              WRITE_BYTE  ("%fx_off%" + 0x0c) 1        // Permanent/Instant
            END
            ELSE BEGIN
              WRITE_BYTE  ("%fx_off%" + 0x0c) 4        // Delayed
              WRITE_BYTE  ("%fx_off%" + 0x0e) %SpellRefreshTime% // User-defined value
            END
            WRITE_BYTE  ("%fx_off%" + 0x12) 100        // Probability
            WRITE_BYTE  ("%fx_off%" + 0x0d) 3          // Dispel/Bypass
          WHILE ("%fx_num%" > 0) BEGIN
            SET "fx_num" = ("%fx_num%" - 1)
            WRITE_BYTE ("%fx_off%" + 0x0d) 2 // no dispel/not bypass
            WRITE_LONG ("%fx_off%" + 0x0e) 0 // duration
          END
        END
      END
      BUT_ONLY_IF_IT_CHANGES
  END




BEGIN @52
GROUP @110
SUBCOMPONENT @20
  PRINT @50
  ACTION_READLN SpellRefreshTime

  OUTER_WHILE !(IS_AN_INT %SpellRefreshTime%) BEGIN
    PRINT @50
    ACTION_READLN SpellRefreshTime
  END

  ACTION_IF (IS_AN_INT ~%SpellRefreshTime%~) THEN BEGIN
    COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
    READ_SHORT 0x1c "spl_type"
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"
    PATCH_IF ("%spl_type%" = "2") BEGIN
      SET "loops" = 0
      SET "delta" = 0
      WHILE ("%loops%" < "%abil_num%") BEGIN
        READ_SHORT ("%abil_off%" + 0x1e + (0x28 * "%loops%")) "abil_fx_num"
        READ_SHORT ("%abil_off%" + 0x20 + (0x28 * "%loops%")) "abil_fx_idx"
        SET "abil_fx_idx" = ("%abil_fx_idx%" + "%delta%")
        WRITE_SHORT ("%abil_off%" + 0x20 + (0x28 * "%loops%")) "%abil_fx_idx%"
        INSERT_BYTES  ("%fx_off%" +        ("%abil_fx_idx%" * 0x30)) 0x30   // New effect
          WRITE_SHORT ("%fx_off%" +        ("%abil_fx_idx%" * 0x30)) 261    // Restore Lost Spell
          WRITE_BYTE ("%fx_off%" + 0x02 + (("%abil_fx_idx%") * 0x30)) 1     // Target Self
          WRITE_BYTE ("%fx_off%" + 0x04 + (("%abil_fx_idx%") * 0x30)) 9     // P1
          WRITE_BYTE ("%fx_off%" + 0x08 + (("%abil_fx_idx%") * 0x30)) 1     // P2 (Priest / Druid)
          PATCH_IF (%SpellRefreshTime% = 0) BEGIN
            WRITE_BYTE ("%fx_off%" + 0x0c + (("%abil_fx_idx%") * 0x30)) 1   // Permanent/Instant
          END
          ELSE BEGIN
            WRITE_BYTE ("%fx_off%" + 0x0c + (("%abil_fx_idx%") * 0x30)) 4   // Delayed
            WRITE_BYTE ("%fx_off%" + 0x0e + (("%abil_fx_idx%") * 0x30)) %SpellRefreshTime% // User-defined value
          END
          WRITE_BYTE ("%fx_off%" + 0x12 + (("%abil_fx_idx%") * 0x30)) 100   // Probability
          WRITE_BYTE ("%fx_off%" + 0x0d + (("%abil_fx_idx%") * 0x30)) 3     // Dispel/Bypass
        SET "delta1" = 1
        SET "delta" = ("%delta%" + "%delta1%")
        WRITE_SHORT ("%abil_off%" + 0x1e + (0x28 * "%loops%")) ("%abil_fx_num%" + "%delta1%")
        SET "loops" = ("%loops%" + 1)
      END
    END
    BUT_ONLY_IF_IT_CHANGES
  END


// ----------------------------------------------------------------------------
// EOF